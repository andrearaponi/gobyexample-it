<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Testing e Benchmarking</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      window.onkeydown = (e) => {
          if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) {
              return;
          }
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'direttiva-embed';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'argomenti-linea-comando';
          }
          
      }
  </script>
  <body>
    <div class="example" id="testing-e-benchmarking">
      <h2><a href="./">Go by Example</a>: Testing e Benchmarking <button id="theme-toggle" title="Cambia tema"><span id="theme-icon">üåô</span></button></h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Il testing unitario √® una parte importante dello scrivere
programmi Go ben strutturati. Il pacchetto <code>testing</code>
fornisce gli strumenti necessari per scrivere unit test
e il comando <code>go test</code> esegue i test.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Per scopo dimostrativo, questo codice √® nel pacchetto
<code>main</code>, ma potrebbe essere qualsiasi pacchetto. Il codice di testing
tipicamente risiede nello stesso pacchetto del codice che testa.</p>

          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/Ro3cHDJwf_8"><img title="Esegui codice" src="play.png" class="run" /></a><img title="Copia codice" src="clipboard.png" class="copy" />
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Testeremo questa semplice implementazione di un
minimo tra interi. Tipicamente, il codice che stiamo testando
sarebbe in un file sorgente chiamato qualcosa come
<code>intutils.go</code>, e il file di test corrispondente sarebbe
chiamato <code>intutils_test.go</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">IntMin</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">a</span> <span class="p">&lt;</span> <span class="nx">b</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Un test si crea scrivendo una funzione con un nome
che inizia con <code>Test</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestIntMinBasic</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">ans</span> <span class="o">:=</span> <span class="nf">IntMin</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">2</span> <span class="p">{</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>t.Error*</code> riporter√† i fallimenti dei test ma continuer√†
ad eseguire il test. <code>t.Fatal*</code> riporter√† i fallimenti
dei test e fermer√† il test immediatamente.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl">        <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;IntMin(2, -2) = %d; want -2&#34;</span><span class="p">,</span> <span class="nx">ans</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Scrivere test pu√≤ essere ripetitivo, quindi √® idiomatico usare
uno <em>stile table-driven</em>, dove gli input dei test e
gli output attesi sono elencati in una tabella e un singolo ciclo
li attraversa ed esegue la logica di test.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestIntMinTableDriven</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">tests</span> <span class="p">=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">        <span class="nx">want</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p><code>t.Run</code> abilita l&rsquo;esecuzione di &ldquo;subtest&rdquo;, uno per ogni
entry della tabella. Questi sono mostrati separatamente
quando si esegue <code>go test -v</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl">        <span class="nx">testname</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%d,%d&#34;</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">testname</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">ans</span> <span class="o">:=</span> <span class="nf">IntMin</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nx">ans</span> <span class="o">!=</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;got %d, want %d&#34;</span><span class="p">,</span> <span class="nx">ans</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>I test di benchmark tipicamente vanno nei file <code>_test.go</code> e sono
nominati iniziando con <code>Benchmark</code>.
Qualsiasi codice necessario per eseguire il benchmark ma che non
dovrebbe essere misurato va prima di questo ciclo.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkIntMin</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">b</span><span class="p">.</span><span class="nf">Loop</span><span class="p">()</span> <span class="p">{</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Il runner di benchmark eseguir√† automaticamente questo corpo
di ciclo molte volte per determinare una stima ragionevole del
tempo di esecuzione di una singola iterazione.</p>

          </td>
          <td class="code">
            
          <pre class="chroma"><code><span class="line"><span class="cl">        <span class="nf">IntMin</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Esegui tutti i test nel progetto corrente in modalit√† verbose.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="gp">$</span> go test -v
</span></span><span class="line"><span class="cl"><span class="go">== RUN   TestIntMinBasic
</span></span></span><span class="line"><span class="cl"><span class="go">--- PASS: TestIntMinBasic (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">=== RUN   TestIntMinTableDriven
</span></span></span><span class="line"><span class="cl"><span class="go">=== RUN   TestIntMinTableDriven/0,1
</span></span></span><span class="line"><span class="cl"><span class="go">=== RUN   TestIntMinTableDriven/1,0
</span></span></span><span class="line"><span class="cl"><span class="go">=== RUN   TestIntMinTableDriven/2,-2
</span></span></span><span class="line"><span class="cl"><span class="go">=== RUN   TestIntMinTableDriven/0,-1
</span></span></span><span class="line"><span class="cl"><span class="go">=== RUN   TestIntMinTableDriven/-1,0
</span></span></span><span class="line"><span class="cl"><span class="go">--- PASS: TestIntMinTableDriven (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">    --- PASS: TestIntMinTableDriven/0,1 (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">    --- PASS: TestIntMinTableDriven/1,0 (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">    --- PASS: TestIntMinTableDriven/2,-2 (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">    --- PASS: TestIntMinTableDriven/0,-1 (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">    --- PASS: TestIntMinTableDriven/-1,0 (0.00s)
</span></span></span><span class="line"><span class="cl"><span class="go">PASS
</span></span></span><span class="line"><span class="cl"><span class="go">ok      examples/testing-e-benchmarking    0.023s</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Esegui tutti i benchmark nel progetto corrente. Tutti i test
vengono eseguiti prima dei benchmark. Il flag <code>bench</code> filtra
i nomi delle funzioni di benchmark con una regexp.</p>

          </td>
          <td class="code">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="gp">$</span> go test -bench=.
</span></span><span class="line"><span class="cl"><span class="go">goos: darwin
</span></span></span><span class="line"><span class="cl"><span class="go">goarch: arm64
</span></span></span><span class="line"><span class="cl"><span class="go">pkg: examples/testing
</span></span></span><span class="line"><span class="cl"><span class="go">BenchmarkIntMin-8 1000000000 0.3136 ns/op
</span></span></span><span class="line"><span class="cl"><span class="go">PASS
</span></span></span><span class="line"><span class="cl"><span class="go">ok      examples/testing-e-benchmarking    0.351s</span></span></span></code></pre>
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="argomenti-linea-comando" rel="next">Argomenti Linea Comando</a>.
      </p>
      

    <p class="footer">
      di <a href="https://markmcgranaghan.com">Mark McGranaghan</a> e <a href="https://eli.thegreenplace.net">Eli Bendersky</a><br>
      traduzione di <a href="https://andrearaponi.it">Andrea Raponi</a> | <a href="https://github.com/andrearaponi/gobyexample-it">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import (\u000A    \"fmt\"\u000A    \"testing\"\u000A)\u000A');codeLines.push('func IntMin(a, b int) int {\u000A    if a \u003C b {\u000A        return a\u000A    }\u000A    return b\u000A}\u000A');codeLines.push('func TestIntMinBasic(t *testing.T) {\u000A    ans :\u003D IntMin(2, -2)\u000A    if ans !\u003D -2 {\u000A');codeLines.push('        t.Errorf(\"IntMin(2, -2) \u003D %d; want -2\", ans)\u000A    }\u000A}\u000A');codeLines.push('func TestIntMinTableDriven(t *testing.T) {\u000A    var tests \u003D []struct {\u000A        a, b int\u000A        want int\u000A    }{\u000A        {0, 1, 0},\u000A        {1, 0, 0},\u000A        {2, -2, -2},\u000A        {0, -1, -1},\u000A        {-1, 0, -1},\u000A    }\u000A');codeLines.push('    for _, tt :\u003D range tests {\u000A');codeLines.push('        testname :\u003D fmt.Sprintf(\"%d,%d\", tt.a, tt.b)\u000A        t.Run(testname, func(t *testing.T) {\u000A            ans :\u003D IntMin(tt.a, tt.b)\u000A            if ans !\u003D tt.want {\u000A                t.Errorf(\"got %d, want %d\", ans, tt.want)\u000A            }\u000A        })\u000A    }\u000A}\u000A');codeLines.push('func BenchmarkIntMin(b *testing.B) {\u000A    for b.Loop() {\u000A');codeLines.push('        IntMin(1, 2)\u000A    }\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
