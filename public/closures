<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Go by Example: Closures</title>
    <link rel=stylesheet href="site.css">
  </head>
  <script>
      window.onkeydown = (e) => {
          if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) {
              return;
          }
          
          if (e.key == "ArrowLeft") {
              window.location.href = 'funzioni-variadiche';
          }
          
          
          if (e.key == "ArrowRight") {
              window.location.href = 'ricorsione';
          }
          
      }
  </script>
  <body>
    <div class="example" id="closures">
      <h2><a href="./">Go by Example</a>: Closures <button id="theme-toggle" title="Cambia tema"><span id="theme-icon">ðŸŒ™</span></button></h2>
      
      <table>
        
        <tr>
          <td class="docs">
            <p>Go supporta le <a href="https://en.wikipedia.org/wiki/Anonymous_function"><em>funzioni anonime</em></a>,
che possono formare <a href="https://en.wikipedia.org/wiki/Closure_(computer_science)"><em>closure</em></a>.
Le funzioni anonime sono utili quando vuoi definire
una funzione inline senza doverla nominare.</p>

          </td>
          <td class="code empty leading">
            
          
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            <a href="https://go.dev/play/p/J16DJZlBXkR"><img title="Esegui codice" src="play.png" class="run" /></a><img title="Copia codice" src="clipboard.png" class="copy" />
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Questa funzione <code>intSeq</code> restituisce un&rsquo;altra funzione, che
definiamo anonimamente nel corpo di <code>intSeq</code>. La
funzione restituita <em>cattura</em> la variabile <code>i</code> per
formare una closure.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">intSeq</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Chiamiamo <code>intSeq</code>, assegnando il risultato (una funzione)
a <code>nextInt</code>. Questo valore di funzione cattura il suo
proprio valore <code>i</code>, che sarÃ  aggiornato ogni volta
che chiamiamo <code>nextInt</code>.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl">    <span class="nx">nextInt</span> <span class="o">:=</span> <span class="nf">intSeq</span><span class="p">()</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Vedi l&rsquo;effetto della closure chiamando <code>nextInt</code>
alcune volte.</p>

          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextInt</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextInt</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextInt</span><span class="p">())</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>Per confermare che lo stato Ã¨ unico per quella
particolare funzione, creiamo e testiamo una nuova.</p>

          </td>
          <td class="code">
            
          <pre class="chroma"><code><span class="line"><span class="cl">    <span class="nx">newInts</span> <span class="o">:=</span> <span class="nf">intSeq</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">newInts</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre>
          </td>
        </tr>
        
      </table>
      
      <table>
        
        <tr>
          <td class="docs">
            
          </td>
          <td class="code leading">
            
          <pre class="chroma"><code><span class="line"><span class="cl"><span class="gp">$</span> go run closures.go
</span></span><span class="line"><span class="cl"><span class="go">1
</span></span></span><span class="line"><span class="cl"><span class="go">2
</span></span></span><span class="line"><span class="cl"><span class="go">3
</span></span></span><span class="line"><span class="cl"><span class="go">1</span></span></span></code></pre>
          </td>
        </tr>
        
        <tr>
          <td class="docs">
            <p>L&rsquo;ultima caratteristica delle funzioni che vedremo per ora Ã¨
la ricorsione.</p>

          </td>
          <td class="code empty">
            
          
          </td>
        </tr>
        
      </table>
      
      
      <p class="next">
        Prossimo esempio: <a href="ricorsione" rel="next">Ricorsione</a>.
      </p>
      

    <p class="footer">
      di <a href="https://markmcgranaghan.com">Mark McGranaghan</a> e <a href="https://eli.thegreenplace.net">Eli Bendersky</a><br>
      traduzione di <a href="https://andrearaponi.it">Andrea Raponi</a> | <a href="https://github.com/andrearaponi/gobyexample-it">source</a> | <a href="https://github.com/mmcgrana/gobyexample#license">license</a>
    </p>

    </div>
    <script>
      var codeLines = [];
      codeLines.push('');codeLines.push('package main\u000A');codeLines.push('import \"fmt\"\u000A');codeLines.push('func intSeq() func() int {\u000A    i :\u003D 0\u000A    return func() int {\u000A        i++\u000A        return i\u000A    }\u000A}\u000A');codeLines.push('func main() {\u000A');codeLines.push('    nextInt :\u003D intSeq()\u000A');codeLines.push('    fmt.Println(nextInt())\u000A    fmt.Println(nextInt())\u000A    fmt.Println(nextInt())\u000A');codeLines.push('    newInts :\u003D intSeq()\u000A    fmt.Println(newInts())\u000A}\u000A');codeLines.push('');codeLines.push('');
    </script>
    <script src="site.js" async></script>
  </body>
</html>
